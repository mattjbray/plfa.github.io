[@@@import "./Bin.iml"]

open Bin
open Nat

(** https://plfa.github.io/Naturals/#Bin

Exercise Bin (stretch)

A more efficient representation of natural numbers uses a binary rather than
a unary system. We represent a number as a bitstring:

data Bin : Set where
  nil : Bin
  x0_ : Bin → Bin
  x1_ : Bin → Bin

For instance, the bitstring

1011

standing for the number eleven is encoded, right to left, as

x1 x1 x0 x1 nil

Representations are not unique due to leading zeros. Hence, eleven is also
represented by 001011, encoded as:

x1 x1 x0 x1 x0 x0 nil

Define a function

inc : Bin → Bin

that converts a bitstring to the bitstring for the next higher number. For
example, since 1100 encodes twelve, we should have:

inc (x1 x1 x0 x1 nil) ≡ x0 x0 x1 x1 nil

Confirm that this gives the correct answer for the bitstrings encoding zero
through four.

Using the above, define a pair of functions to convert between the two
representations.

to   : ℕ → Bin
from : Bin → ℕ

For the former, choose the bitstring to have no leading zeros if it
represents a positive natural, and represent zero by x0 nil. Confirm that
these both give the correct answer for zero through four.

*)

(* inc 0 = 1*)
verify (fun _ -> inc (x0 nil) = x1 nil);;
(* inc 1 = 10 *)
verify (fun _ -> inc (x1 nil) = x0 (x1 nil));;
(* inc 10 = 11 *)
verify (fun _ -> inc (x0 (x1 nil)) = x1 (x1 nil));;
(* inc 11 = 100 *)
verify (fun _ -> inc (x1 (x1 nil)) = x0 (x0 (x1 nil)));;
(* inc 100 = 101 *)
verify (fun _ -> inc (x0 (x0 (x1 nil))) = x1 (x0 (x1 nil)));;

(* to 0 = 0 *)
verify (fun _ -> to_ Zero = x0 nil);;
(* to 1 = 1 *)
verify (fun _ -> to_ one = x1 nil);;
(* to 2 = 10 *)
verify (fun _ -> to_ two = x0 (x1 nil));;
(* to 3 = 11 *)
verify (fun _ -> to_ three = x1 (x1 nil));;
(* to 4 = 100 *)
verify (fun _ -> to_ four = x0 (x0 (x1 nil)));;

(* from 0 = 0 *)
verify (fun _ -> from (x0 nil) = Zero);;
(* from 1 = 1 *)
verify (fun _ -> from (x1 nil) = one);;
(* from 10 = 2 *)
verify (fun _ -> from (x0 (x1 nil)) = two);;
(* from 11 = 3 *)
verify (fun _ -> from (x1 (x1 nil)) = three);;
(* from 100 = 4 *)
verify (fun _ -> from (x0 (x0 (x1 nil))) = four);;
[@@@import "./Nat.iml"];;
[@@@max_induct 1i];;
open Nat;;

let inv_leq_suc m n =
  Suc m <= Suc n
  ==>
  m <= n
[@@imandra_theorem]

let inv_leq_zero m n =
  m <= Zero
  ==>
  m = Zero
[@@imandra_theorem]

let leq_refl n =
  n <= n
[@@imandra_theorem]
[@@auto][@@rw]

let leq_trans m n p =
  m <= n &&
  n <= p
  ==>
  m <= p
[@@imandra_theorem]
[@@auto][@@fc]

let leq_antisym m n =
  m <= n &&
  n <= m
  ==>
  m = n
[@@imandra_theorem]
[@@auto][@@rw]

let leq_total m n =
  if m = n then
    m <= n && n <= m
  else
    m <= n || n <= m
[@@imandra_theorem]
[@@auto]

let plus_mono_leq_right n p q =
  p <= q
  ==>
  n + p <= n + q
[@@imandra_theorem]
[@@auto][@@rw]

let n_lt_suc_n n =
  n <= Suc n
[@@imandra_theorem]
[@@auto][@@rw]

let lt_implies_lt_suc m n =
  m <= n
  ==>
  m <= Suc n
[@@imandra_theorem]
[@@auto][@@rw];;

let m_lt_n_plus_m m n =
  m <= n + m
[@@imandra_theorem]
[@@auto][@@rw]

let plus_mono_leq_left m n p =
  m <= n
  ==>
  m + p <= n + p
[@@imandra_theorem]
[@@auto][@@rw]

let plus_mono_leq m n p q =
  m <= n &&
  p <= q
  ==>
  m + p <= n + q
[@@imandra_theorem]
[@@auto]
[@@apply plus_mono_leq_left m n p]
[@@apply plus_mono_leq_right n p q]
[@@rw]

(**
   #### Exercise `*-mono-≤` (stretch)

   Show that multiplication is monotonic with regard to inequality.
*)

let mul_mono_leq_right n p q =
  p <= q
  ==>
  n * p <= n * q
[@@imandra_theorem]
[@@auto][@@rw]

let mul_mono_leq_left m n p =
  m <= n
  ==>
  m * p <= n * p
[@@imandra_theorem]
[@@auto][@@rw]

let mul_mono_leq m n p q =
  m <= n &&
  p <= q
  ==>
  m * p <= n * q
[@@imandra_theorem]
[@@auto][@@rw]
[@@apply mul_mono_leq_left m n p]
[@@apply mul_mono_leq_right n p q]

(**
   #### Exercise `<-trans` (recommended) {#less-trans}

   Show that strict inequality is transitive.
*)

let lt_trans m n p =
  m < n &&
  n < p
  ==>
  m < p
[@@imandra_theorem]
[@@auto][@@fc]

(**
   #### Exercise `trichotomy` {#trichotomy}

   Show that strict inequality satisfies a weak version of trichotomy, in
   the sense that for any `m` and `n` that one of the following holds:
  * `m < n`,
  * `m ≡ n`, or
  * `m > n`.
*)

let lt_trichotomy m n =
  m < n || m = n || n < m
[@@imandra_theorem]
[@@auto]

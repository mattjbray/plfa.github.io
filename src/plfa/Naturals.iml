[@@@import "./Nat.iml"]

open Nat

(** #### Exercise `seven` {#seven}
    Write out `7` in longhand.
*)
let _ =
  Suc (Suc (Suc (Suc (Suc (Suc (Suc Zero))))))
;;

(** #### Exercise `+-example` {#plus-example}

    Compute `3 + 4`, writing out your reasoning as a chain of equations.
*)

[@@@redef true];;

let begin_ x = (true, x)
let (=<>) (b, x) y = (b && x = y, y)
let qed (b, x) = b

let one = Suc Zero
let two = Suc one
let three = Suc two
let four = Suc three
let five = Suc four
let six = Suc five
let seven = Suc six
let twelve = Suc (Suc (Suc (Suc (Suc seven))))

verify (fun _ ->
    begin_ (three + four)
    =<> Suc (two + four)
    =<> Suc (Suc (one + four))
    =<> Suc (Suc (Suc (Zero + four)))
    =<> Suc (Suc (Suc four))
    =<> seven
    |> qed
  );;

(** #### Exercise `*-example` {#times-example}

    Compute `3 * 4`, writing out your reasoning as a chain of equations.
*)

verify (fun _ ->
    begin_ (three * four)
    =<> Suc two * four
    =<> four + (two * four)
    =<> four + (Suc one * four)
    =<> four + (four + (one * four))
    =<> four + (four + (Suc Zero * four))
    =<> four + (four + (four + (Zero * four)))
    =<> four + (four + (four + Zero))
    =<> twelve
    |> qed
  );;

(** #### Exercise `_^_` (recommended) {#power}

    Define exponentiation, which is given by the following equations:

    m ^ 0        =  1
    m ^ (1 + n)  =  m * (m ^ n)

    Check that `3 ^ 4` is `81`.
*)

verify (fun _ ->
    begin_ (three ^ four)
    =<> three * (three ^ three)
    =<> three * (three * (three ^ two))
    =<> three * (three * (three * (three ^ one)))
    =<> three * (three * (three * (three * (three ^ Zero))))
    =<> three * (three * (three * (three * one)))
    =<> of_z 81
    |> qed
  )[@@blast];;


(** #### Exercise `∸-examples` (recommended) {#monus-examples}

    Compute `5 ∸ 3` and `3 ∸ 5`, writing out your reasoning as a chain of equations.
*)

verify (fun _ ->
    begin_ (five -. three)
    =<> four -. two
    =<> three -. one
    =<> two -. Zero
    =<> two
    |> qed
  )[@@blast];;

verify (fun _ ->
    begin_ (three -. five)
    =<> two -. four
    =<> one -. three
    =<> Zero -. two
    =<> Zero
    |> qed
  )[@@blast];;
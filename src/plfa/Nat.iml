type t =
  | Zero
  | Suc of t

let zero = Zero
let one = Suc zero
let two = Suc one
let three = Suc two
let four = Suc three

let rec of_z (x : int) : t =
  if x <= 0 then
    Zero
  else
    Suc (of_z (x - 1))

let rec (<=)  m n =
  match m, n with
  | Zero, _ -> true
  | Suc m, Suc n -> m <= n
  | _ -> false

let rec (<) m n =
  match m, n with
  | Zero, Suc n -> true
  | Suc m, Suc n -> m < n
  | _ -> false

let rec (+) t1 t2 =
  match t1 with
  | Zero -> t2
  | Suc t1' -> Suc (t1' + t2)

let rec ( * ) m n =
  match m with
  | Zero -> Zero
  | Suc m -> n + (m * n)

let rec ( ^ ) m n =
  match n with
  | Zero -> Suc Zero
  | Suc n -> m * (m ^ n)

let rec ( -. ) m n =
  match m, n with
  | m, Zero -> m
  | Zero, Suc n -> Zero
  | Suc m, Suc n -> m -. n